{"version":3,"sources":["../src/MacUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import { AllPublishOptions, newError, safeStringifyJson } from \"builder-util-runtime\"\nimport { stat } from \"fs-extra\"\nimport { createReadStream } from \"fs\"\nimport { createServer, IncomingMessage, ServerResponse } from \"http\"\nimport { AddressInfo } from \"net\"\nimport { AppAdapter } from \"./AppAdapter\"\nimport { AppUpdater, DownloadUpdateOptions } from \"./AppUpdater\"\nimport { ResolvedUpdateFileInfo } from \"./main\"\nimport { findFile } from \"./providers/Provider\"\nimport AutoUpdater = Electron.AutoUpdater\n\nexport class MacUpdater extends AppUpdater {\n  private readonly nativeUpdater: AutoUpdater = require(\"electron\").autoUpdater\n\n  private squirrelDownloadedUpdate: boolean = false\n\n  constructor(options?: AllPublishOptions, app?: AppAdapter) {\n    super(options, app)\n\n    this.nativeUpdater.on(\"error\", it => {\n      this._logger.warn(it)\n      this.emit(\"error\", it)\n    })\n    this.nativeUpdater.on(\"update-downloaded\", () => {\n      this.squirrelDownloadedUpdate = true\n    })\n  }\n\n  protected doDownloadUpdate(downloadUpdateOptions: DownloadUpdateOptions): Promise<Array<string>> {\n    let files = downloadUpdateOptions.updateInfoAndProvider.provider.resolveFiles(downloadUpdateOptions.updateInfoAndProvider.info);\n\n    // Allow arm64 macs to install universal or rosetta2(x64) - https://github.com/electron-userland/electron-builder/pull/5524\n    const isArm64 = (file: ResolvedUpdateFileInfo) => file.url.pathname.includes(\"arm64\")\n    if (files.some(isArm64)) {\n      files = files.filter(file => (process.arch === \"arm64\") === isArm64(file));\n    }\n\n    const zipFileInfo = findFile(files, \"zip\", [\"pkg\", \"dmg\"])\n    if (zipFileInfo == null) {\n      throw newError(`ZIP file not provided: ${safeStringifyJson(files)}`, \"ERR_UPDATER_ZIP_FILE_NOT_FOUND\")\n    }\n\n    const server = createServer()\n    server.on(\"close\", () => {\n      this._logger.info(`Proxy server for native Squirrel.Mac is closed (was started to download ${zipFileInfo.url.href})`)\n    })\n\n    function getServerUrl(): string {\n      const address = server.address() as AddressInfo\n      return `http://127.0.0.1:${address.port}`\n    }\n\n    return this.executeDownload({\n      fileExtension: \"zip\",\n      fileInfo: zipFileInfo,\n      downloadUpdateOptions,\n      task: (destinationFile, downloadOptions) => {\n        return this.httpExecutor.download(zipFileInfo.url, destinationFile, downloadOptions)\n      },\n      done: async event => {\n        const downloadedFile = event.downloadedFile\n        let updateFileSize = zipFileInfo.info.size\n        if (updateFileSize == null) {\n          updateFileSize = (await stat(downloadedFile)).size\n        }\n\n        return await new Promise<Array<string>>((resolve, reject) => {\n          // insecure random is ok\n          const fileUrl = \"/\" + Date.now() + \"-\" + Math.floor(Math.random() * 9999) + \".zip\"\n          server.on(\"request\", (request: IncomingMessage, response: ServerResponse) => {\n            const requestUrl = request.url!!\n            this._logger.info(`${requestUrl} requested`)\n            if (requestUrl === \"/\") {\n              const data = Buffer.from(`{ \"url\": \"${getServerUrl()}${fileUrl}\" }`)\n              response.writeHead(200, {\"Content-Type\": \"application/json\", \"Content-Length\": data.length})\n              response.end(data)\n              return\n            }\n\n            if (!requestUrl.startsWith(fileUrl)) {\n              this._logger.warn(`${requestUrl} requested, but not supported`)\n              response.writeHead(404)\n              response.end()\n              return\n            }\n\n            this._logger.info(`${fileUrl} requested by Squirrel.Mac, pipe ${downloadedFile}`)\n\n            let errorOccurred = false\n            response.on(\"finish\", () => {\n              try {\n                setImmediate(() => server.close())\n              }\n              finally {\n                if (!errorOccurred) {\n                  this.nativeUpdater.removeListener(\"error\", reject)\n                  resolve([])\n                }\n              }\n            })\n\n            const readStream = createReadStream(downloadedFile)\n            readStream.on(\"error\", error => {\n              try {\n                response.end()\n              }\n              catch (e) {\n                this._logger.warn(`cannot end response: ${e}`)\n              }\n              errorOccurred = true\n              this.nativeUpdater.removeListener(\"error\", reject)\n              reject(new Error(`Cannot pipe \"${downloadedFile}\": ${error}`))\n            })\n\n            response.writeHead(200, {\n              \"Content-Type\": \"application/zip\",\n              \"Content-Length\": updateFileSize,\n            })\n            readStream.pipe(response)\n          })\n          server.listen(0, \"127.0.0.1\", () => {\n            this.nativeUpdater.setFeedURL({\n              url: getServerUrl(),\n              headers: {\"Cache-Control\": \"no-cache\"},\n            })\n\n            this.nativeUpdater.once(\"error\", reject)\n\n            // The update has been dowloaded and is ready to be served to Squirrel\n            this.dispatchUpdateDownloaded(event)\n\n            if (this.autoInstallOnAppQuit) {\n              // This will trigger fetching and installing the file on Squirrel side\n              this.nativeUpdater.checkForUpdates()\n            }\n          })\n        })\n      }\n    })\n  }\n\n  quitAndInstall(): void {\n    if (this.squirrelDownloadedUpdate) {\n      // Update already fetched by Squirrel, it's ready to install\n      this.nativeUpdater.quitAndInstall()\n    } else {\n      // Quit and install as soon as Squirrel get the update\n      this.nativeUpdater.on(\"update-downloaded\", () => {\n        this.nativeUpdater.quitAndInstall()\n      })\n\n      // And trigger the update\n      this.nativeUpdater.checkForUpdates()\n    }\n  }\n}"],"sourceRoot":""}
